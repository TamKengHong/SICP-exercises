#lang sicp
;ok lets first think of what to do for a binary search tree.
;luckily we already have this from the textbook, not that i cant code it
;out lol.
(define (entry tree) (car tree))
(define (left-branch tree) (cadr tree))
(define (right-branch tree) (caddr tree))
(define (make-tree entry left right)
  (list entry left right))

(define (element-of-set? x set)
  (cond ((null? set) false)
        ((= x (entry set)) true)
        ((< x (entry set))
         (element-of-set? x (left-branch set)))
        ((> x (entry set))
         (element-of-set? x (right-branch set)))))

(define (lookup given-key set-of-records)
  (element-of-set? given-key set-of-records))

;(entry set) pulls out the key from the set-of-records.
;actually i should just copy paste and edit element-of-set to be lookup
;but nvm.