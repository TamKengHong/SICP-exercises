#lang sicp
;just edit if procedure to fit in filter. if its not true, then null.
(define (filtered-accumulate filter combiner null-value term a next b)
  (if (not (filter a))
      null-value
      (combiner (term a)
                (filtered-accumulate filter combiner null-value term (next a) next b))))

(define (square x) (* x x))
(define (smallest-divisor n) (find-divisor n 2))
(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (+ 1 test-divisor)))))
(define (divides? a b) (= (remainder b a) 0))
(define (prime? n)
  (= n (smallest-divisor n)))